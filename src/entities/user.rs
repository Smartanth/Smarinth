use async_trait::async_trait;
use serde::{Deserialize, Serialize};
use sqlx::{AnyPool, Error};

use crate::configs::database::DatabaseScheme;

use super::Builder;

#[derive(sqlx::FromRow, Clone, Deserialize, Serialize)]
pub struct User {
    pub id: i32,
    pub username: String,
    pub email: String,
    pub password: String,
}

pub struct UserBuilder;

#[async_trait]
impl Builder for UserBuilder {
    async fn build(db_scheme: &DatabaseScheme, pool: &AnyPool) -> Result<(), Error> {
        let auto_increase = match db_scheme {
            DatabaseScheme::POSTGRES => "GENERATED BY DEFAULT AS IDENTITY",
            DatabaseScheme::SQLITE => "AUTOINCREMENT",
            DatabaseScheme::MYSQL => "AUTO_INCREMENT"
        };

        let statement = format!(
            r#"
            CREATE TABLE users (
                id INT {auto_increase} PRIMARY KEY,
                username VARCHAR(255),
                email VARCHAR(255),
                password VARCHAR(255)
            );
            "#);

        sqlx::query(&statement).execute(pool).await?;

        Ok(())
    }
}